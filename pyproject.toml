[tool.poetry]
name = "prefect_cli_utils"
version = "0.8.0"
description = "CLI utility functions that I use for projects that use prefect"
authors = ["Jasper Ginn <jasperginn@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.scripts]
prefect_cli_utils = "prefect_cli_utils.cli:entrypoint"

[tool.poetry.dependencies]
python = "^3.8.13,<3.10"
typer = "^0.6.1"
pydantic-yaml = {extras = ["pyyaml", "ruamel"], version = "^0.8.1"}
fastapi = "^0.86.0"
prefect = "^2.6.7"
prefect-gcp = "^0.2.6"
google-cloud-aiplatform = "^1.21.0"

[tool.poetry.dev-dependencies]
flake8 = "^5.0.4"
mypy = "^0.990"
pre-commit = "^2.12.1"
pytest = "^7.0"
pytest-cov = "^2.11.1"
isort = "^5.10.1"
black = "^22.10.0"
myst-nb = "^0.15.0"
sphinx-autoapi = "^1.8.4"
sphinx-rtd-theme = "^1.0.0"
ipykernel = "^6.15.1"
python-semantic-release = "^7.32.1"
pytest-helpers-namespace = "^2021.12.29"
interrogate = "^1.5.0"

[[tool.poetry.source]]
name = "gcpypi"
url = "https://europe-west4-python.pkg.dev/jasper-ginn-sndbx-v/pypi-registry/simple/"
default = false
secondary = true

[tool.black]
line-length = 88
exclude = '''
^/(
  (
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.venv
    | _build
    | build
    | dist
    | notebooks
  )
)
'''

[tool.isort]
profile = "black"
extend_skip = ["notebooks"]

[tool.mypy]
exclude = "^notebooks/"
ignore_missing_imports = true

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = true
fail-under = 10
exclude = [
  "setup.py", "docs", "build", "src/prefect_cli_utils/cli.py", "src/prefect_cli_utils/commands"
]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
# possible values: 0 (minimal output), 1 (-v), 2 (-vv)
verbose = 0
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false
#generate-badge = "."
#badge-format = "svg"

[tool.semantic_release]
version_variable = [
  "pyproject.toml:version"
]
branch = "main"                             # branch to make releases of
changelog_file = "CHANGELOG.md"             # changelog file
build_command = "poetry build"              # build dists
dist_path = "dist/"                         # where to put dists
upload_to_release = true                    # auto-create GitHub release
upload_to_pypi = false                      # don't auto-upload to PyPI
remove_dist = false                         # don't remove dists
patch_without_tag = true                    # patch release by default
changelog_sections = "feature, build, refactor, style, test, fix, breaking, documentation, performance"
commit_message = "{version} [ci skip]"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
